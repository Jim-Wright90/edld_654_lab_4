
R version 3.6.0 (2019-04-26) -- "Planting of a Tree"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(tidyverse)
── Attaching packages ─────────────────────────────────────── tidyverse 1.3.0 ──
✔ ggplot2 3.3.2     ✔ purrr   0.3.4
✔ tibble  3.0.4     ✔ dplyr   1.0.2
✔ tidyr   1.1.2     ✔ stringr 1.4.0
✔ readr   1.4.0     ✔ forcats 0.5.0
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
> library(tidymodels)
── Attaching packages ────────────────────────────────────── tidymodels 0.1.1 ──
✔ broom     0.7.2      ✔ recipes   0.1.14
✔ dials     0.0.9      ✔ rsample   0.0.8 
✔ infer     0.5.3      ✔ tune      0.1.1 
✔ modeldata 0.1.0      ✔ workflows 0.2.1 
✔ parsnip   0.1.4      ✔ yardstick 0.0.7 
── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──
✖ scales::discard() masks purrr::discard()
✖ dplyr::filter()   masks stats::filter()
✖ recipes::fixed()  masks stringr::fixed()
✖ dplyr::lag()      masks stats::lag()
✖ yardstick::spec() masks readr::spec()
✖ recipes::step()   masks stats::step()
> 
> 
> all_cores <- parallel::detectCores(logical = FALSE)
> 
> #install.packages("doParallel")
> 
> library(doParallel)
Loading required package: foreach

Attaching package: ‘foreach’

The following objects are masked from ‘package:purrr’:

    accumulate, when

Loading required package: iterators
Loading required package: parallel
> cl <- makePSOCKcluster(all_cores)
> registerDoParallel(cl)
> foreach::getDoParWorkers()
[1] 28
> clusterEvalQ(cl, {library(tidymodels)})
[[1]]
 [1] "yardstick"  "workflows"  "tune"       "tidyr"      "tibble"    
 [6] "rsample"    "recipes"    "purrr"      "parsnip"    "modeldata" 
[11] "infer"      "ggplot2"    "dplyr"      "dials"      "scales"    
[16] "broom"      "tidymodels" "stats"      "graphics"   "grDevices" 
[21] "utils"      "datasets"   "methods"    "base"      

[[2]]
 [1] "yardstick"  "workflows"  "tune"       "tidyr"      "tibble"    
 [6] "rsample"    "recipes"    "purrr"      "parsnip"    "modeldata" 
[11] "infer"      "ggplot2"    "dplyr"      "dials"      "scales"    
[16] "broom"      "tidymodels" "stats"      "graphics"   "grDevices" 
[21] "utils"      "datasets"   "methods"    "base"      

[[3]]
 [1] "yardstick"  "workflows"  "tune"       "tidyr"      "tibble"    
 [6] "rsample"    "recipes"    "purrr"      "parsnip"    "modeldata" 
[11] "infer"      "ggplot2"    "dplyr"      "dials"      "scales"    
[16] "broom"      "tidymodels" "stats"      "graphics"   "grDevices" 
[21] "utils"      "datasets"   "methods"    "base"      

[[4]]
 [1] "yardstick"  "workflows"  "tune"       "tidyr"      "tibble"    
 [6] "rsample"    "recipes"    "purrr"      "parsnip"    "modeldata" 
[11] "infer"      "ggplot2"    "dplyr"      "dials"      "scales"    
[16] "broom"      "tidymodels" "stats"      "graphics"   "grDevices" 
[21] "utils"      "datasets"   "methods"    "base"      

[[5]]
 [1] "yardstick"  "workflows"  "tune"       "tidyr"      "tibble"    
 [6] "rsample"    "recipes"    "purrr"      "parsnip"    "modeldata" 
[11] "infer"      "ggplot2"    "dplyr"      "dials"      "scales"    
[16] "broom"      "tidymodels" "stats"      "graphics"   "grDevices" 
[21] "utils"      "datasets"   "methods"    "base"      

[[6]]
 [1] "yardstick"  "workflows"  "tune"       "tidyr"      "tibble"    
 [6] "rsample"    "recipes"    "purrr"      "parsnip"    "modeldata" 
[11] "infer"      "ggplot2"    "dplyr"      "dials"      "scales"    
[16] "broom"      "tidymodels" "stats"      "graphics"   "grDevices" 
[21] "utils"      "datasets"   "methods"    "base"      

[[7]]
 [1] "yardstick"  "workflows"  "tune"       "tidyr"      "tibble"    
 [6] "rsample"    "recipes"    "purrr"      "parsnip"    "modeldata" 
[11] "infer"      "ggplot2"    "dplyr"      "dials"      "scales"    
[16] "broom"      "tidymodels" "stats"      "graphics"   "grDevices" 
[21] "utils"      "datasets"   "methods"    "base"      

[[8]]
 [1] "yardstick"  "workflows"  "tune"       "tidyr"      "tibble"    
 [6] "rsample"    "recipes"    "purrr"      "parsnip"    "modeldata" 
[11] "infer"      "ggplot2"    "dplyr"      "dials"      "scales"    
[16] "broom"      "tidymodels" "stats"      "graphics"   "grDevices" 
[21] "utils"      "datasets"   "methods"    "base"      

[[9]]
 [1] "yardstick"  "workflows"  "tune"       "tidyr"      "tibble"    
 [6] "rsample"    "recipes"    "purrr"      "parsnip"    "modeldata" 
[11] "infer"      "ggplot2"    "dplyr"      "dials"      "scales"    
[16] "broom"      "tidymodels" "stats"      "graphics"   "grDevices" 
[21] "utils"      "datasets"   "methods"    "base"      

[[10]]
 [1] "yardstick"  "workflows"  "tune"       "tidyr"      "tibble"    
 [6] "rsample"    "recipes"    "purrr"      "parsnip"    "modeldata" 
[11] "infer"      "ggplot2"    "dplyr"      "dials"      "scales"    
[16] "broom"      "tidymodels" "stats"      "graphics"   "grDevices" 
[21] "utils"      "datasets"   "methods"    "base"      

[[11]]
 [1] "yardstick"  "workflows"  "tune"       "tidyr"      "tibble"    
 [6] "rsample"    "recipes"    "purrr"      "parsnip"    "modeldata" 
[11] "infer"      "ggplot2"    "dplyr"      "dials"      "scales"    
[16] "broom"      "tidymodels" "stats"      "graphics"   "grDevices" 
[21] "utils"      "datasets"   "methods"    "base"      

[[12]]
 [1] "yardstick"  "workflows"  "tune"       "tidyr"      "tibble"    
 [6] "rsample"    "recipes"    "purrr"      "parsnip"    "modeldata" 
[11] "infer"      "ggplot2"    "dplyr"      "dials"      "scales"    
[16] "broom"      "tidymodels" "stats"      "graphics"   "grDevices" 
[21] "utils"      "datasets"   "methods"    "base"      

[[13]]
 [1] "yardstick"  "workflows"  "tune"       "tidyr"      "tibble"    
 [6] "rsample"    "recipes"    "purrr"      "parsnip"    "modeldata" 
[11] "infer"      "ggplot2"    "dplyr"      "dials"      "scales"    
[16] "broom"      "tidymodels" "stats"      "graphics"   "grDevices" 
[21] "utils"      "datasets"   "methods"    "base"      

[[14]]
 [1] "yardstick"  "workflows"  "tune"       "tidyr"      "tibble"    
 [6] "rsample"    "recipes"    "purrr"      "parsnip"    "modeldata" 
[11] "infer"      "ggplot2"    "dplyr"      "dials"      "scales"    
[16] "broom"      "tidymodels" "stats"      "graphics"   "grDevices" 
[21] "utils"      "datasets"   "methods"    "base"      

[[15]]
 [1] "yardstick"  "workflows"  "tune"       "tidyr"      "tibble"    
 [6] "rsample"    "recipes"    "purrr"      "parsnip"    "modeldata" 
[11] "infer"      "ggplot2"    "dplyr"      "dials"      "scales"    
[16] "broom"      "tidymodels" "stats"      "graphics"   "grDevices" 
[21] "utils"      "datasets"   "methods"    "base"      

[[16]]
 [1] "yardstick"  "workflows"  "tune"       "tidyr"      "tibble"    
 [6] "rsample"    "recipes"    "purrr"      "parsnip"    "modeldata" 
[11] "infer"      "ggplot2"    "dplyr"      "dials"      "scales"    
[16] "broom"      "tidymodels" "stats"      "graphics"   "grDevices" 
[21] "utils"      "datasets"   "methods"    "base"      

[[17]]
 [1] "yardstick"  "workflows"  "tune"       "tidyr"      "tibble"    
 [6] "rsample"    "recipes"    "purrr"      "parsnip"    "modeldata" 
[11] "infer"      "ggplot2"    "dplyr"      "dials"      "scales"    
[16] "broom"      "tidymodels" "stats"      "graphics"   "grDevices" 
[21] "utils"      "datasets"   "methods"    "base"      

[[18]]
 [1] "yardstick"  "workflows"  "tune"       "tidyr"      "tibble"    
 [6] "rsample"    "recipes"    "purrr"      "parsnip"    "modeldata" 
[11] "infer"      "ggplot2"    "dplyr"      "dials"      "scales"    
[16] "broom"      "tidymodels" "stats"      "graphics"   "grDevices" 
[21] "utils"      "datasets"   "methods"    "base"      

[[19]]
 [1] "yardstick"  "workflows"  "tune"       "tidyr"      "tibble"    
 [6] "rsample"    "recipes"    "purrr"      "parsnip"    "modeldata" 
[11] "infer"      "ggplot2"    "dplyr"      "dials"      "scales"    
[16] "broom"      "tidymodels" "stats"      "graphics"   "grDevices" 
[21] "utils"      "datasets"   "methods"    "base"      

[[20]]
 [1] "yardstick"  "workflows"  "tune"       "tidyr"      "tibble"    
 [6] "rsample"    "recipes"    "purrr"      "parsnip"    "modeldata" 
[11] "infer"      "ggplot2"    "dplyr"      "dials"      "scales"    
[16] "broom"      "tidymodels" "stats"      "graphics"   "grDevices" 
[21] "utils"      "datasets"   "methods"    "base"      

[[21]]
 [1] "yardstick"  "workflows"  "tune"       "tidyr"      "tibble"    
 [6] "rsample"    "recipes"    "purrr"      "parsnip"    "modeldata" 
[11] "infer"      "ggplot2"    "dplyr"      "dials"      "scales"    
[16] "broom"      "tidymodels" "stats"      "graphics"   "grDevices" 
[21] "utils"      "datasets"   "methods"    "base"      

[[22]]
 [1] "yardstick"  "workflows"  "tune"       "tidyr"      "tibble"    
 [6] "rsample"    "recipes"    "purrr"      "parsnip"    "modeldata" 
[11] "infer"      "ggplot2"    "dplyr"      "dials"      "scales"    
[16] "broom"      "tidymodels" "stats"      "graphics"   "grDevices" 
[21] "utils"      "datasets"   "methods"    "base"      

[[23]]
 [1] "yardstick"  "workflows"  "tune"       "tidyr"      "tibble"    
 [6] "rsample"    "recipes"    "purrr"      "parsnip"    "modeldata" 
[11] "infer"      "ggplot2"    "dplyr"      "dials"      "scales"    
[16] "broom"      "tidymodels" "stats"      "graphics"   "grDevices" 
[21] "utils"      "datasets"   "methods"    "base"      

[[24]]
 [1] "yardstick"  "workflows"  "tune"       "tidyr"      "tibble"    
 [6] "rsample"    "recipes"    "purrr"      "parsnip"    "modeldata" 
[11] "infer"      "ggplot2"    "dplyr"      "dials"      "scales"    
[16] "broom"      "tidymodels" "stats"      "graphics"   "grDevices" 
[21] "utils"      "datasets"   "methods"    "base"      

[[25]]
 [1] "yardstick"  "workflows"  "tune"       "tidyr"      "tibble"    
 [6] "rsample"    "recipes"    "purrr"      "parsnip"    "modeldata" 
[11] "infer"      "ggplot2"    "dplyr"      "dials"      "scales"    
[16] "broom"      "tidymodels" "stats"      "graphics"   "grDevices" 
[21] "utils"      "datasets"   "methods"    "base"      

[[26]]
 [1] "yardstick"  "workflows"  "tune"       "tidyr"      "tibble"    
 [6] "rsample"    "recipes"    "purrr"      "parsnip"    "modeldata" 
[11] "infer"      "ggplot2"    "dplyr"      "dials"      "scales"    
[16] "broom"      "tidymodels" "stats"      "graphics"   "grDevices" 
[21] "utils"      "datasets"   "methods"    "base"      

[[27]]
 [1] "yardstick"  "workflows"  "tune"       "tidyr"      "tibble"    
 [6] "rsample"    "recipes"    "purrr"      "parsnip"    "modeldata" 
[11] "infer"      "ggplot2"    "dplyr"      "dials"      "scales"    
[16] "broom"      "tidymodels" "stats"      "graphics"   "grDevices" 
[21] "utils"      "datasets"   "methods"    "base"      

[[28]]
 [1] "yardstick"  "workflows"  "tune"       "tidyr"      "tibble"    
 [6] "rsample"    "recipes"    "purrr"      "parsnip"    "modeldata" 
[11] "infer"      "ggplot2"    "dplyr"      "dials"      "scales"    
[16] "broom"      "tidymodels" "stats"      "graphics"   "grDevices" 
[21] "utils"      "datasets"   "methods"    "base"      

> 
> 
> full_train <- read_csv("data/train.csv")

── Column specification ────────────────────────────────────────────────────────
cols(
  .default = col_character(),
  id = col_double(),
  attnd_dist_inst_id = col_double(),
  attnd_schl_inst_id = col_double(),
  enrl_grd = col_double(),
  calc_admn_cd = col_logical(),
  partic_dist_inst_id = col_double(),
  partic_schl_inst_id = col_double(),
  score = col_double(),
  classification = col_double(),
  ncessch = col_double(),
  lat = col_double(),
  lon = col_double()
)
ℹ Use `spec()` for the full column specifications.

> 
> #data_sample <- dplyr::sample_frac(full_train, size = 0.005)
> 
> # create initial splits 
> set.seed(3000)
> 
> data_split <- initial_split(full_train)
> 
> train_split <- training(data_split)
> test_split <- testing(data_split)
> 
> class(data_split)
[1] "rsplit"   "mc_split"
> class(train_split)
[1] "tbl_df"     "tbl"        "data.frame"
> class(test_split)
[1] "tbl_df"     "tbl"        "data.frame"
> 
> 
> # K-fold cross validation 
> 
> set.seed(3000)
> 
> cv_splits <- vfold_cv(train_split, v = 10)
> 
> 
> # basic recipe
> knn01_rec <- 
+   recipe(classification ~ enrl_grd + lat + lon + gndr, data = train_split) %>%
+   step_mutate(classification = ifelse (classification < 3, "below", "proficient")) %>%
+   step_mutate(enrl_grd = factor(enrl_grd), gndr = factor(gndr)) %>%
+   step_meanimpute(lat, lon) %>%
+   step_unknown(enrl_grd, gndr) %>% 
+   step_dummy(enrl_grd, gndr) %>% 
+   step_normalize(lat, lon)
> 
> # set model
> knn01_mod <- 
+   nearest_neighbor() %>% 
+   set_engine("kknn") %>% 
+   set_mode("classification")
> 
> translate(knn01_mod)
K-Nearest Neighbor Model Specification (classification)

Computational engine: kknn 

Model fit template:
kknn::train.kknn(formula = missing_arg(), data = missing_arg(), 
    ks = min_rows(5, data, 5))
> 
> #install.packages("kknn")
> library(kknn)
> 
> fit1 <- fit_resamples(knn01_mod, knn01_rec, cv_splits)
> saveRDS(fit1, "fit1.Rds")
> 
> 
> 
> 
> 
> proc.time()
   user  system elapsed 
170.886  13.894 669.296 
